<?xml version="1.0"?>
<doc>
  <assembly>
    <name>uZone</name>
  </assembly>
  <members>
    <member name="T:uZone.RequestError">
      <summary>
            A list of all error codes they can be returned by the <see cref="T:uZone.Request" /> class.
            </summary>
    </member>
    <member name="F:uZone.RequestError.Unknown">
      <summary> Unknow error. The underlying code does not have enough information to qualify the error. </summary>
    </member>
    <member name="F:uZone.RequestError.NoError">
      <summary> No error - the request operation was successfull </summary>
    </member>
    <member name="F:uZone.RequestError.BadRequest">
      <summary> Request was rejected by the uZone system. Either Master or Node was unable to process the request at the moment. </summary>
    </member>
    <member name="F:uZone.RequestError.MasterError">
      <summary> Failed due to an internal error on uZone Master. </summary>
    </member>
    <member name="F:uZone.RequestError.InstanceTimeout">
      <summary> The instance failed to start within defined time interval. </summary>
    </member>
    <member name="F:uZone.RequestError.ClientError">
      <summary> Failed due to an unexpected client exception. </summary>
    </member>
    <member name="F:uZone.RequestError.NodeOffline">
      <summary> Can't process a node related request. The node is currently not available. </summary>
    </member>
    <member name="F:uZone.RequestError.TypeNotAvailable">
      <summary> A requested instance type is not supported by any of nodes (according to other rules) </summary>
    </member>
    <member name="F:uZone.RequestError.InvalidAffinity">
      <summary> Afinity parameter was invalid. Cannot launch an instance at a given CPU or core. </summary>
    </member>
    <member name="F:uZone.RequestError.BadPath">
      <summary> Failed because the instance (at a given node) is registered under a bad/no path. </summary>
    </member>
    <member name="F:uZone.RequestError.ExecutableNotFound">
      <summary> Request failed as the node could not find the instance executable at its registered path. </summary>
    </member>
    <member name="F:uZone.RequestError.ExecutableError">
      <summary> Request failed due to an error that occurred while opening the instance executable. </summary>
    </member>
    <member name="F:uZone.RequestError.UnknownStartupError">
      <summary> Request failed due to an unknown error that occurred during instance startup. </summary>
    </member>
    <member name="F:uZone.RequestError.NoPortAvailable">
      <summary> Request failed as the node failed to allocate a port for the instance to use.</summary>
    </member>
    <member name="F:uZone.RequestError.InstanceUnavailable">
      <summary> The instance referenced in the request does not exist. Presumably it was shutdown before the request could reach the uZone Master server. </summary>
    </member>
    <member name="T:uZone.NodeSelectionMode">
      <summary>
            The modes in this enumeration provide a smart and powerfull way how to start a new instance by letting uZone to choose the right node for you.
            </summary>
    </member>
    <member name="F:uZone.NodeSelectionMode.Default">
      <summary> A default behaviour, currently mapped to RoundRobin </summary>
    </member>
    <member name="F:uZone.NodeSelectionMode.RunningLeastInstances">
      <summary>
            A new instance will be launched on a node currently running the smallest number of instances.
            </summary>
    </member>
    <member name="F:uZone.NodeSelectionMode.RoundRobin">
      <summary>
            These scenario causes the nodes to "cycle". You may find it useful if you want to balance number of running instances on nodes
            which were started at the same moment. On the other hand, this mode is not suitable for situations where some node(s) are already
            running couple of instances and there are other completely fresh node(s) at the same time.
            </summary>
    </member>
    <member name="T:uZone.InstanceState">
      <summary>
            Used to represent the current instance status in <see cref="T:uZone.InstanceProcess" />.
            </summary>
      <remarks>
            Some of the states should be considered as internal and the user code should ignore them.
            </remarks>
    </member>
    <member name="F:uZone.InstanceState.Starting">
      <summary>
            Internal. Will be removed later.
            We will never expose an instance to an user API before it reach the running state.
            </summary>
    </member>
    <member name="F:uZone.InstanceState.Running">
      <summary> The instance is currently running. There is no problem about it. :-) </summary>
    </member>
    <member name="F:uZone.InstanceState.Unresponsive">
      <summary>
            The instance is currently non-responding but there is a chance that it will get better again.
            This state should be understood as temporary/transition
            </summary>
    </member>
    <member name="F:uZone.InstanceState.Stopping">
      <summary>
            The instance is currently stopping.
            This state should be understood as temporary/transition. The next state (under normal conditions)
            should be <see cref="F:uZone.InstanceState.Stopped" /> but could be different if something unexpected will happen.
            </summary>
    </member>
    <member name="F:uZone.InstanceState.Stopped">
      <summary> The instance stopped peacefully. </summary>
    </member>
    <member name="F:uZone.InstanceState.Crashed">
      <summary> Abnormal instance termination occurred. The instance crashed. </summary>
    </member>
    <member name="F:uZone.InstanceState.NonExisting">
      <summary> Internal. Will be removed later. </summary>
    </member>
    <member name="F:uZone.InstanceState.Unreachable">
      <summary> This status is set when the owning node is disconnected/unreachable. </summary>
    </member>
    <member name="T:uZone.NodeState">
      <summary>
            Used to represent the current node status in <see cref="T:uZone.Node" />.
            </summary>
    </member>
    <member name="F:uZone.NodeState.Available">
      <summary>
            Several conditions neeeds to be met to declare the Node as available:
             - The Node is running and connected to the uZone Master server
             - The Client is succefully connected to the uZone Master server
            </summary>
    </member>
    <member name="F:uZone.NodeState.Unavailable">
      <summary>
            One (or more) of the conditions mentioned in the Available state description is not met.
            </summary>
    </member>
    <member name="F:uZone.NodeState.Discarded">
      <summary>
            The node  gets into the discarded state when it got disconnected from the uZone Master server and was unable
            to connect successfuly back in a reasonable time. Only Master can set the node into this state.
            This state is final.
            </summary>
    </member>
    <member name="T:uZone.ConnectionError">
      <summary>
            This error code is reported via OnFailedToConnect callback when <see cref="M:uZone.InstanceManager.Connect(System.String,System.Int32)" />
            fails to connect to the uZone Master server.
            </summary>
    </member>
    <member name="F:uZone.ConnectionError.CreateSocketOrThreadFailure">
      <summary> A problem occured on a local computer. It is unable to create the socket or a related resource. </summary>
    </member>
    <member name="F:uZone.ConnectionError.AlreadyConnecting">
      <summary> Another connect request is already running. </summary>
    </member>
    <member name="F:uZone.ConnectionError.AlreadyConnected">
      <summary> There is already a connection established. </summary>
    </member>
    <member name="F:uZone.ConnectionError.NoError">
      <summary> Success </summary>
    </member>
    <member name="F:uZone.ConnectionError.Disconnecting">
      <summary>
            The connection was cancelled due to a Disconnect call.
            </summary>
    </member>
    <member name="F:uZone.ConnectionError.ConnectionFailed">
      <summary> In general, any other problem than "host unreachable" </summary>
    </member>
    <member name="F:uZone.ConnectionError.IncompatibleVersions">
      <summary> The client and the server are running incompatible versions. </summary>
    </member>
    <member name="F:uZone.ConnectionError.ConnectionTimeout">
      <summary> Unable to connect to the server within given timeout interval. It is kind of "host unrechable" error. </summary>
    </member>
    <member name="F:uZone.ConnectionError.HandshakeFailed">
      <summary>
            The host was reached but communication failed.
            </summary>
    </member>
    <member name="T:uZone.InstanceOptions">
      <summary>
            Contains startup options and configurations regarding instances.
            </summary>
    </member>
    <member name="F:uZone.InstanceOptions.arguments">
      <summary>
            A list of arguments that are sent as command-line input to the instance. Can for example contain Unity3D flags such as '-batchmode', but also custom arguments.
            </summary>
    </member>
    <member name="F:uZone.InstanceOptions.commandLine">
      <summary>
            The command line arguments passed to the launched instance.
            </summary>
      <remarks>
            In fact, this string represents only a part of the command-line arguments. The seconds part comes from the related instance type definition.
            Thus, the commandLine member here respresents the dynamic part of the instance process's command-line while the instance type definition
            represents the static part of it.
            
            Pay an extra attention to the command line format because it use to be a source of tricky and difficult (time consuming) to find problems.
            Use spaces to distinguish individual arguments. If you want to pass several words (a text string containing spaces) as a single argument
            just enclose such character sequence in quotation marks.
            </remarks>
    </member>
    <member name="F:uZone.InstanceOptions.processorAffinity">
      <summary>
            Sets the processors on which the associated instance can run. Each processor it can run on has its bit set to 1. As an example, assigning this property the value of 1 would allow the
            instance to run on the first processor, 2 on the second processor, and 3 on both the first and second processor (determined by the OS). Default behavior is to allow all available processors
            to run the instance.
            </summary>
    </member>
    <member name="F:uZone.InstanceOptions.instanceType">
      <summary>
            Sets what type of instance should be started. This name is associated with a binary path on nodes where it is installed.
            </summary>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String)">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct.	</summary>
      <param name="instanceType">Instance type.</param>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct. </summary>
      <param name="instanceType">Instance type.</param>
      <param name="processorAffinity">Processor affinity.</param>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct. </summary>
      <param name="instanceType">Instance type.</param>
      <param name="arguments">Arguments.</param>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct. </summary>
      <param name="instanceType">Instance type.</param>
      <param name="processorAffinity">Processor affinity.</param>
      <param name="arguments">Arguments.</param>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String,System.String)">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct. </summary>
      <param name="instanceType">Instance type.</param>
      <param name="commandLine">Command-line arguments</param>
    </member>
    <member name="M:uZone.InstanceOptions.#ctor(System.String,System.Int32,System.String)">
      <summary> Initializes a new instance of the <see cref="T:uZone.InstanceOptions" /> struct. </summary>
      <param name="instanceType">Instance type.</param>
      <param name="processorAffinity">Processor affinity.</param>
      <param name="commandLine">Command-line arguments.</param>
    </member>
    <member name="M:uZone.InstanceOptions.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceOptions" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceOptions" />.</returns>
    </member>
    <member name="P:uZone.InstanceOptions.gameType">
      <summary>
            Sets what type of instance should be started. This name is associated with a binary path on nodes where it is installed.
            </summary>
    </member>
    <member name="T:uZone.LogLevel">
      <summary>
            The available log levels that can be set for minimum logging and also can be set per log category.
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Off">
      <summary>
            Logs nothing.
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Error">
      <summary>
            Logs errors only
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Warning">
      <summary>
            Logs warnings and errors.
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Info">
      <summary>
            Logs info messages, warnings and errors.
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Debug">
      <summary>
            Logs debug messages, info messages, warnings and errors. The most detailed log level available.
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Informational">
      <summary>
            Deprecated, please use NetworkLogLevel.Info instead
            </summary>
    </member>
    <member name="F:uZone.LogLevel.Full">
      <summary>
            Deprecated, please use NetworkLogLevel.Debug instead
            </summary>
    </member>
    <member name="T:uZone.LogFlags">
      <summary>
            The different log categories currently available. Each item is a binary flag. You can create various combinations
            by "or"-ing individual flags together. These flags can be used to define verbosity of the log output which can
            be set by the <see cref="M:uZone.Log.SetLevel(uZone.LogFlags,uZone.LogLevel)" /> method.
            </summary>
    </member>
    <member name="F:uZone.LogFlags.None">
      <summary> no cathegory = no output at all </summary>
    </member>
    <member name="F:uZone.LogFlags.Node">
      <summary> A node related log records </summary>
    </member>
    <member name="F:uZone.LogFlags.RPC">
      <summary> Internal data, messages and RPCs communication log records  </summary>
    </member>
    <member name="F:uZone.LogFlags.Network">
      <summary>
            Involves all the log records related to the low level network communication, like
            connection/disconnection process, handshakes, connection timeouts etc.
            </summary>
    </member>
    <member name="F:uZone.LogFlags.BadMessage">
      <summary> Involves bad data formats, invalid parameters, non-existing object ids or RPC names etc. </summary>
    </member>
    <member name="F:uZone.LogFlags.Master">
      <summary> Master related log records </summary>
    </member>
    <member name="F:uZone.LogFlags.Performance">
      <summary> Performance related log records </summary>
    </member>
    <member name="F:uZone.LogFlags.All">
      <summary> A predefined value representing all the LogFlagss </summary>
    </member>
    <member name="T:uZone.Log">
      <summary>
            Class for configuring uZone logging.
            </summary>
    </member>
    <member name="F:uZone.Log.errorWriter">
      <summary>
            The delegate writing error messages. Default implementation send output to the Editor console / output_log.txt file.
            </summary>
    </member>
    <member name="F:uZone.Log.warningWriter">
      <summary>
            The delegate writing warning messages. Default implementation send output to the Editor console / output_log.txt file.
            </summary>
    </member>
    <member name="F:uZone.Log.infoWriter">
      <summary>
            The delegate writing info messages. Default implementation send output to the Editor console / output_log.txt file.
            </summary>
    </member>
    <member name="F:uZone.Log.debugWriter">
      <summary>
            The delegate writing debug messages. Default implementation send output to the Editor console / output_log.txt file.
            </summary>
    </member>
    <member name="F:uZone.Log.minLevel">
      <summary>
            The minimum level for all logging categories. This can be overruled by setting a detailed log level for an individual category to a higher log level via <see cref="M:uZone.Log.SetLevel(uZone.LogFlags,uZone.LogLevel)" />.
            </summary>
      <value>Default value is LogLevel.Warning</value>
    </member>
    <member name="M:uZone.Log.HasLevel(uZone.LogFlags,uZone.LogLevel)">
      <summary>
            Returns true if the the categories (flags) are set by either <see cref="M:uZone.Log.SetLevel(uZone.LogFlags,uZone.LogLevel)" /> or <see cref="F:uZone.Log.minLevel" />.
            </summary>
    </member>
    <member name="M:uZone.Log.SetLevel(uZone.LogFlags,uZone.LogLevel)">
      <summary>
            Sets a detailed logging level for the specified categories (flags). If the categories (flags) is set to a lower log level than <see cref="F:uZone.Log.minLevel" /> then <see cref="F:uZone.Log.minLevel" /> overrules the detailed log level when logging.
            </summary>
    </member>
    <member name="M:uZone.Log.GetMaxLevel(uZone.LogFlags)">
      <summary>
            Gets the highest detailed log level configured for any of the log categories (flags), where
            <see cref="F:uZone.LogLevel.Off" /> is the lowest and <see cref="F:uZone.LogLevel.Debug" /> is the highest.
            </summary>
    </member>
    <member name="M:uZone.Log.GetMinLevel(uZone.LogFlags)">
      <summary>
            Gets the lowest detailed log level configured for any of the log categories (flags), where
            <see cref="F:uZone.LogLevel.Off" /> is the lowest and <see cref="F:uZone.LogLevel.Debug" /> is the highest.
            </summary>
    </member>
    <member name="M:uZone.Log.SetNetworkingLogLevel(uZone.LogLevel)">
      <summary>
            Sets the logging level of internal networking library.
            </summary>
    </member>
    <member name="P:uZone.Log.errorFlags">
      <summary>
            Gets or sets the log categories for the <see cref="F:uZone.Log.errorWriter" />.
            </summary>
    </member>
    <member name="P:uZone.Log.warningFlags">
      <summary>
            Gets or sets the log categories for the <see cref="F:uZone.Log.warningWriter" />.
            </summary>
    </member>
    <member name="P:uZone.Log.infoFlags">
      <summary>
            Gets or sets the log categories for the <see cref="F:uZone.Log.infoWriter" />.
            </summary>
    </member>
    <member name="P:uZone.Log.debugFlags">
      <summary>
            Gets or sets the log categories for the <see cref="F:uZone.Log.debugWriter" />.
            </summary>
    </member>
    <member name="T:uZone.Log.Writer">
      <summary>
             Implement one or several new delegates if there is a need to replace the default Writers in this class.
             </summary>
      <example>
             In your own implementation you can choose another destination for log messages.
             This example code shows how to send log messages to a file.
             <code>
             using UnityEngine;
             using System.Collections;
             using System.IO;
            
             public class CustomFileLog : MonoBehaviour
             {
            	 public string logFileName = @"c:\temp\MyLog.txt";
            
            	 void Start()
            	 {
            		 //This code replaces the default debugWriter with a new delegate
            		 uZone.Log.debugWriter = delegate(uZone.LogFlags flags, object[] args)
            		 {
            			 string line = System.DateTime.Now + ", " + uZone.LogUtility.ToString(args) + "\r\n";
            			 File.AppendAllText(logFileName, line);
            		 };
            
            		 //Set the level to Debug for the category uZone.LogFlags.Server
            		 uZone.Log.SetLevel(uZone.LogFlags.Server, uZone.LogLevel.Debug);
            
            		 //Do some debug logging to the file
            		 for (int i = 1; i != 5; i++)
            		 {
            			 uZone.Log.Debug(uZone.LogFlags.Server, "Hello ", i, " from demo code.");
            		 }
            	 }
             }
             </code></example>
    </member>
    <member name="T:uZone.Exceptions.InstanceManagerUnknownException">
      <summary>
            This exception is reserved for a very special cases when we can't really identify/name the problem.
            Normally it should not appear.
            </summary>
    </member>
    <member name="T:uZone.Exceptions.InstanceManagerException">
      <summary>
            A base class for all InstanceManager realated exceptions
            </summary>
    </member>
    <member name="P:uZone.Exceptions.InstanceManagerException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
    </member>
    <member name="P:uZone.Exceptions.InstanceManagerException.StackTrace">
      <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
    </member>
    <member name="T:uZone.InstanceManager">
      <summary>
            This is one of the most important classes in uZone. It is the main class of the client side of the system.
            </summary>
      <remarks>
            This class allows the client to connect to a uZone Master server, list to existing nodes and instances,
            request to start a new Instance, register to various events and much more.
            <para />
            The first thing you have to do is to initialize it by calling the
            <see cref="M:uZone.InstanceManager.Initialize" />
            method.
            <para />
            Consequently you have to connect to a uZone Master server. That can be done by calling the
            <see cref="M:uZone.InstanceManager.Connect(System.String,System.Int32)" />
            method. Once you are successfully connected you can use all the remaining parts of the API. Conversely,
            if you are not connected, many methods will throw the
            <see cref="T:uZone.Exceptions.InstanceManagerException" />
            exception once they are called.
            </remarks>
    </member>
    <member name="M:uZone.InstanceManager.Initialize(uZone.InstanceManager.GlobalEvents)">
      <summary>
            Initializes the instance manager, which allows the application to start and stop instances through uZone's interface.
            </summary>
      <param name="globalEvents">
            Can be used to register all the requested global event listeners at once. Each member of the <see cref="T:uZone.InstanceManager.GlobalEvents" />
            structure may be set to null.
            </param>
      <seealso cref="M:uZone.InstanceManager.Connect(System.String,System.Int32)" />
    </member>
    <member name="M:uZone.InstanceManager.Initialize">
      <summary>
            Initializes the instance manager, which allows the application to start and stop instances through uZone's interface.
            </summary>
      <remarks>
            There is another overloaded
            <see cref="M:uZone.InstanceManager.Initialize(uZone.InstanceManager.GlobalEvents)" />
            function overload which allows you to initialize uZone client (InstanceManager) and define a set of
            global event listeners at the same time.
            </remarks>
      <seealso cref="M:uZone.InstanceManager.Connect(System.String,System.Int32)" />
    </member>
    <member name="M:uZone.InstanceManager.Connect(System.String,System.Int32,uZone.OnResponseCallback{uZone.ConnectRequest},uZone.OnResponseCallback{uZone.ConnectRequest})">
      <summary>
            Connects the instance manager to a uZone Master server at a given endpoint.
            </summary>
      <param name="host">The IP/Hostname of the uZone Master server.</param>
      <param name="port">The port number where the uZone Master server is listening on.</param>
      <param name="onSuccess">A callback routine which is triggered once the connect request finished sucessfully. Can be set to null.</param>
      <param name="onError">A callback routine which is triggered once the connect request failed. Can be set to null.</param>
      <returns>Returns the request object even when the function fails.</returns>
    </member>
    <member name="M:uZone.InstanceManager.Connect(System.String,System.Int32)">
      <summary>
            Connects the instance manager to a uZone Master server at a given endpoint.
            </summary>
      <param name="host">The IP/Hostname of the uZone Master server.</param>
      <param name="port">The port number where the uZone Master server is listening on.</param>
      <returns>Returns the request object even when the function fails.</returns>
    </member>
    <member name="M:uZone.InstanceManager.Disconnect">
      <summary>
            Disconnects the instance manager. This will also remove all pending and queued requests.
            </summary>
    </member>
    <member name="M:uZone.InstanceManager.StartInstance(uZone.InstanceOptions,uZone.NodeSelectionMode,uZone.OnResponseCallback{uZone.StartInstanceRequest},uZone.OnResponseCallback{uZone.StartInstanceRequest})">
      <summary>
            Creates and sends a request to uZone to start a new instance. The state of the request is available in the returned <see cref="T:uZone.StartInstanceRequest" /> object.
            </summary>
      <param name="options">Contains options and parameters for the new instance.</param>
      <param name="selectMode">Selects what algorithm should be used to chose what node to start the instance on.</param>
      <param name="onResponse">An optional callback</param>
      <param name="onError">Callback that is executed on error.</param>
      <returns>Information regarding the request and its state</returns>
    </member>
    <member name="M:uZone.InstanceManager.StartInstance(uZone.InstanceOptions,uZone.NodeSelectionMode)">
      <summary>
      </summary>
      <param name="options">
      </param>
      <param name="selectMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:uZone.InstanceManager.id">
      <summary>
            An unique client identifier. It is generated/assigned by uZone Master.
            </summary>
    </member>
    <member name="P:uZone.InstanceManager.isConnected">
      <summary>
            Returns whether the InstanceManager is fully connected to a uZone Master server.
            </summary>
    </member>
    <member name="E:uZone.InstanceManager.onDisconnected">
      <summary> Used to notify the application when the client disconnects from a uZone Master server. </summary>
    </member>
    <member name="E:uZone.InstanceManager.onNodeConnected">
      <summary> Used to notify application about a new new node connected </summary>
    </member>
    <member name="E:uZone.InstanceManager.onNodeDisconnected">
      <summary> Used to notify application about an existing node disconnected </summary>
    </member>
    <member name="E:uZone.InstanceManager.onNodeStateChanged">
      <summary> Used to notify application when the state of the node changed </summary>
    </member>
    <member name="E:uZone.InstanceManager.onInstanceStarted">
      <summary> Used to notify application about a new instance started </summary>
    </member>
    <member name="E:uZone.InstanceManager.onInstanceStopped">
      <summary> Used to notify application about an existing instance stopeed </summary>
    </member>
    <member name="E:uZone.InstanceManager.onInstanceStateChanged">
      <summary> Used to notify application when the state of the instance changed </summary>
    </member>
    <member name="P:uZone.InstanceManager.nodes">
      <summary> Returns all currently known nodes </summary>
    </member>
    <member name="T:uZone.InstanceManager.GlobalEvents">
      <summary>
             This structure helps to register all the global event listeners at the same time and right
             during the initiation of uZone client (InstanceManager)
             </summary>
      <remarks>
             The "global events" does mean that the related events are triggered as they appear in the uZone system without any filtering.
             There are also local (object oriented versions) for all Node and InstanceProcess related events. Check all the public events
             declared at <see cref="T:uZone.Node" /> and <see cref="T:uZone.InstanceProcess" /> classes
             </remarks>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onDisconnected">
      <summary> Global <see cref="T:uZone.InstanceManager.OnDisconnectedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onNodeConnected">
      <summary> Global <see cref="T:uZone.InstanceManager.OnNodeConnectedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onNodeDisconnected">
      <summary> Global <see cref="T:uZone.InstanceManager.OnNodeDisconnectedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onNodeStateChanged">
      <summary> Global <see cref="T:uZone.InstanceManager.OnNodeStateChangedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onInstanceStarted">
      <summary> Global <see cref="T:uZone.InstanceManager.OnInstanceStartedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onInstanceStopped">
      <summary> Global <see cref="T:uZone.InstanceManager.OnInstanceStoppedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.InstanceManager.GlobalEvents.onInstanceStateChanged">
      <summary> Global <see cref="T:uZone.InstanceManager.OnInstanceStateChangedHandler" /> delegate. </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnDisconnectedHandler">
      <summary> Used to notify the application when the client disconnects from a uZone Master server. </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnNodeConnectedHandler">
      <summary> Used to notify the application about a new new node connected </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnNodeDisconnectedHandler">
      <summary> Used to notify the application about an existing node disconnected </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnNodeStateChangedHandler">
      <summary> Used to notify application when the state of the node changed </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnInstanceStartedHandler">
      <summary> Used to notify application about a new instance started </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnInstanceStoppedHandler">
      <summary> Used to notify application about an existing instance stopeed </summary>
    </member>
    <member name="T:uZone.InstanceManager.OnInstanceStateChangedHandler">
      <summary> Used to notify application when the state of the instance changed </summary>
    </member>
    <member name="T:uZone.InstanceManager.Debug">
      <summary>
            This class is here for debug and statistics purposes only.
            </summary>
      <remarks>
            The content of this class
            may change without any prior warnings, backward compatibility is not guaranteed.
            Normaly there should be no reason to use it unless you are trying to identify some problem.
            </remarks>
    </member>
    <member name="P:uZone.InstanceManager.Debug.pendingRequests">
      <summary>
            Returns the count of currently pending requests.
            </summary>
    </member>
    <member name="P:uZone.InstanceManager.Debug.queuedRequests">
      <summary>
            Returns the count of currently queued requests.
            </summary>
    </member>
    <member name="T:uZone.Request">
      <summary>
            Base class for all the request classes.
            </summary>
    </member>
    <member name="M:uZone.Request.WaitUntilDone">
      <summary>
            Use this function to wait for the request to complete, i.e. until Request.isDone is true, using the Unity coroutine mechanism.
            Typically you would call 'yield return request.WaitUntilDone();' from a coroutine before examining the result of the request. The
            coroutine will resume once any given success or error callback has finished, unless the request was cancelled by the user. Then
            the coroutine will resume without any callback being invoked.
            </summary>
      <returns>A Coroutine object that can be yielded on from a coroutine.</returns>
    </member>
    <member name="M:uZone.Request.GetError">
      <summary>
            Gets the error status of a failed request.
            </summary>
      <returns>The error status of the request.</returns>
      <remarks>
            If there is no error, this will throw a InstanceManagerException. If you are unsure
            if the request has an error or not, you can avoid the exception by checking Request.hasFailed or by using Request.TryGetError().
            </remarks>
    </member>
    <member name="M:uZone.Request.TryGetError(uZone.RequestError@)">
      <summary>
            Gets the error status of the request. The error will be returned through the requestError out parameter.
            </summary>
      <param name="requestError">The resulting error status of the request.</param>
      <returns>True if the request has failed, or false otherwise.</returns>
    </member>
    <member name="M:uZone.Request.GetErrorString">
      <summary>
            Gets the error message of a failed request.
            </summary>
      <returns>The error message of the request.</returns>
      <remarks>
            If there is no error, this will throw a InstanceManagerException.
            If you are unsure if the request has an error or not, you can avoid the exception by checking Request.hasFailed
            or by using Request.TryGetErrorString().
            </remarks>
    </member>
    <member name="M:uZone.Request.TryGetErrorString(System.String@)">
      <summary>
            Gets the error message of the request. The error will be returned through the error out parameter.
            </summary>
      <param name="error">The resulting error message of the request.</param>
      <returns>True if the request has failed, or false otherwise.</returns>
    </member>
    <member name="M:uZone.Request.ToStringState">
      <summary>
            This is a ToString helper function which should be used to child classes to help them to integrate
            the request state into their ToString resultant strings.
            </summary>
      <returns>The request state in the text format.</returns>
    </member>
    <member name="M:uZone.Request.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.Request" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.Request" />.</returns>
    </member>
    <member name="M:uZone.Request.InvokeResponseCallback">
      <summary>
            Invokes the response callback. Kind of interface method. Each derived class must to implement it.
            </summary>
      <returns>
        <c>true</c>, if response callback was invoked, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:uZone.Request.InvokeErrorCallback">
      <summary>
            Invokes the error callback. Kind of interface method. Each derived class must to implement it.
            </summary>
      <returns>
        <c>true</c>, if error callback was invoked, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:uZone.Request.isDone">
      <summary>
            Indicates whether the request has returned, either from success or failure.
            </summary>
    </member>
    <member name="P:uZone.Request.isSuccessful">
      <summary>
            Indicates whether the request has been successfully completed.
            </summary>
    </member>
    <member name="P:uZone.Request.isCancelled">
      <summary>
            Indicates whether the request has been cancelled by the user.
            </summary>
    </member>
    <member name="P:uZone.Request.hasFailed">
      <summary>
            Indicates whether the request has failed.
            </summary>
    </member>
    <member name="T:uZone.OnResponseCallback`1">
      <summary>
            Used by the different request classes to describe a callback that is invoked when the request completes. It is used for both
            successful and failed requests.
            </summary>
      <typeparam name="TRequest">The type of the request object.</typeparam>
      <param name="request">The request from which the callback was invoked.</param>
    </member>
    <member name="T:uZone.StartInstanceRequest">
      <summary>
            Represents a request to start an instance through uZone.
            </summary>
    </member>
    <member name="F:uZone.StartInstanceRequest.options">
      <summary>
            The instance options applied to the instance.
            </summary>
    </member>
    <member name="F:uZone.StartInstanceRequest.node">
      <summary>
            This is an input parameter. It points to a node the new instance should be launched on or it may be set to null
            when it is uZone Master responsibility to assign the request to a node.
            </summary>
      <remarks>
            This parameter is indirectly defined by an application programmer based on the request creation method.
            If the request is created by the
            <see cref="M:uZone.Node.StartInstance(uZone.InstanceOptions)" />
            method the node member is set to the reference to the given node. If the request is created by the
            <see cref="M:uZone.InstanceManager.StartInstance(uZone.InstanceOptions,uZone.NodeSelectionMode)" />
            it is set to null.
            </remarks>
    </member>
    <member name="F:uZone.StartInstanceRequest.selectionMode">
      <summary>
            The algorithm used by uZone to decide what node should start the instance, given that no node was given explicitly.
            <see cref="F:uZone.NodeSelectionMode.Default" /> if PeerID was supplied,
            </summary>
    </member>
    <member name="M:uZone.StartInstanceRequest.GetInstance">
      <summary>
            Gets the newly started instance, given that it started successfully.
            </summary>
      <returns>Newly started instance process.</returns>
      <remarks>
            If the request failed or is still active, this will throw a InstanceManagerException. If you are unsure
            if the request has succeeded or not, you can avoid the exception by checking <see cref="P:uZone.Request.isSuccessful" /> or by using <see cref="M:uZone.StartInstanceRequest.TryGetInstance(uZone.InstanceProcess@)" />.
            </remarks>
    </member>
    <member name="M:uZone.StartInstanceRequest.TryGetInstance(uZone.InstanceProcess@)">
      <summary>
            Safe version of <see cref="M:uZone.StartInstanceRequest.GetInstance" /></summary>
      <returns>Returns true when the request was sucessfull and the requested value is available and valid, otherwise returns false.</returns>
      <param name="outInstance">Contains the newly started instance process when the function returns true.</param>
    </member>
    <member name="M:uZone.StartInstanceRequest.InvokeErrorCallback">
      <summary>
            Invokes the error callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="M:uZone.StartInstanceRequest.InvokeResponseCallback">
      <summary>
            Invokes the response callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="M:uZone.StartInstanceRequest.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.StartInstanceRequest" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.StartInstanceRequest" />.</returns>
    </member>
    <member name="T:uZone.StopInstanceRequest">
      <summary>
            Represents a request to shut down one or several instances through uZone.
            </summary>
    </member>
    <member name="F:uZone.StopInstanceRequest.instance">
      <summary>
            The instance requested to stop
            </summary>
    </member>
    <member name="M:uZone.StopInstanceRequest.InvokeErrorCallback">
      <summary>
            Invokes the error callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="M:uZone.StopInstanceRequest.InvokeResponseCallback">
      <summary>
            Invokes the response callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="M:uZone.StopInstanceRequest.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.StopInstanceRequest" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.StopInstanceRequest" />.</returns>
    </member>
    <member name="T:uZone.Instance">
      <summary>
            This is the main class for the Instance side of the uZone system. This class is responsible for the module
            initialization/connection and tracking the instance connection status.
            </summary>
    </member>
    <member name="M:uZone.Instance.Initialize(uZone.Instance.GlobalEvents)">
      <summary>
            Initialize this instance.
            </summary>
      <remarks>
            Each instance-side application (mostly a game server) must call this function at the moment when the application
            is fully initialized and ready to use. The application fails to start properly from the uZone node point of view
            when this function call is omitted.
            </remarks>
      <param name="globalEvents"> Set of all global events supported by the instance side. </param>
    </member>
    <member name="M:uZone.Instance.Initialize(System.Int32,uZone.Instance.GlobalEvents)">
      <summary>
            Initializes uZone on an instance started by the uZone instance manager by connecting it to the uZone system. This will put the instance in the 'Running'-state.
            Use this overload when port allocation is turned off, or when the instance uses another port than the one allocated by uZone.
            </summary>
      <param name="openedPort"> This is the port the instance uses (listens on) for communication with the parent uZone node. </param>
      <param name="globalEvents"> Set of all global events supported by the instance side. </param>
    </member>
    <member name="P:uZone.Instance.peerID">
      <summary>
            The peerID contains identifier within the uZone network.
            Returns the PeerID.unassigned value once disconnected.
            </summary>
    </member>
    <member name="P:uZone.Instance.port">
      <summary>
            The port used by the instance (game server) to accept incoming client connections. Initially assigned by uZone if port allocation is turned on in the system, or else defaults to -1.
            If the instance fails to use the port or if port allocation is turned off, assign the actual port used when calling <see cref="M:uZone.Instance.Initialize(System.Int32,uZone.Instance.GlobalEvents)" />.
            This will override the allocated port (which will be made available for use by future instances), and update the corresponding value in uZone.
            </summary>
    </member>
    <member name="P:uZone.Instance.isConnected">
      <summary>
            Gets a value indicating whether this <see cref="T:uZone.Instance" /> is connected.
            </summary>
      <value>
        <c>true</c> if is connected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:uZone.Instance.wasStartedByuZone">
      <summary>
            Gets a value indicating whether this Unity instance was started through uZone.
            </summary>
      <remarks>
            If false, any calls to <see cref="M:uZone.Instance.Initialize(uZone.Instance.GlobalEvents)" /> will fail.
            </remarks>
    </member>
    <member name="T:uZone.Instance.OnInitializedHandler">
      <summary>
            Used to notify the application when the instance connects to the parent uZone node. The instance is considered as
            fully initialized (from the uZone point of view) once this event is triggered.
            </summary>
    </member>
    <member name="T:uZone.Instance.OnFailedToInitializeHandler">
      <summary>
            Used to notify that the instance failed to connect to a parent node.
            </summary>
      <remarks>
            That usualy happens when the application is not launched via uZone system but directly.
            
            The triggering of this event does mean that the instance application is not a part of the
            uZone network and thus failed to initialize. In such case you should consider to terminate
            your instance application or to switch it into an "unmanaged" mode.
            </remarks>
    </member>
    <member name="T:uZone.Instance.OnNodeLostHandler">
      <summary>
            Used to notify the application when the connection between the parent node and thi instance
            application is lost.
            </summary>
      <remarks>
            The triggering of this event does mean that the parent node either crashed or is non-responsive.
            
            In such case you should consider to terminate your instance application or to switch it into
            an "unmanaged" mode.
            </remarks>
    </member>
    <member name="T:uZone.Instance.OnStoppingSignalHandler">
      <summary>
            This event is triggered when the <see cref="T:uZone.StopInstanceRequest" /> is delivered through the uZone
            network to the target instance application.
            </summary>
      <remarks>
            This is not an notification event but a signal. The application is responsible to terminate
            gracefully within a reasonable time (before the timeout is reached).
            Once the timeout is reached the instance process is forcibly killed by the parent node.
            Check the node config file documentation for more details.
            </remarks>
    </member>
    <member name="T:uZone.Instance.GlobalEvents">
      <summary>
            This structure helps to register all the global event listeners at the same time and right
            during the initiation of uZone Instance application
            </summary>
    </member>
    <member name="F:uZone.Instance.GlobalEvents.onInitialized">
      <summary> Global <see cref="T:uZone.Instance.OnInitializedHandler" /> delegate. </summary>
    </member>
    <member name="F:uZone.Instance.GlobalEvents.onFailedToInitialize">
      <summary>
            Global <see cref="T:uZone.Instance.OnFailedToInitializeHandler" /> delegate.
            </summary>
      <remarks>
            If no handler is provided by the application (null is passed) a default handler is used.
            The default handler simply calls the standard System.Application.Quit() method.
            </remarks>
    </member>
    <member name="F:uZone.Instance.GlobalEvents.onNodeLost">
      <summary>
            Global <see cref="T:uZone.Instance.OnNodeLostHandler" /> delegate.
            </summary>
      <remarks>
            If no handler is provided by the application (null is passed) a default handler is used.
            The default handler simply calls the standard System.Application.Quit() method.
            </remarks>
    </member>
    <member name="F:uZone.Instance.GlobalEvents.onStoppingSignal">
      <summary>
            Global <see cref="T:uZone.Instance.OnStoppingSignalHandler" /> delegate.
            </summary>
      <remarks>
            If no handler is provided by the application (null is passed) a default handler is used.
            The default handler simply calls the standard System.Application.Quit() method.
            </remarks>
    </member>
    <member name="T:uZone.Node">
      <summary>
            This class represents a specific uZone node on the client (InstanceManager) side.
            </summary>
    </member>
    <member name="F:uZone.Node.id">
      <summary>
            Uniques identifier of the node. It is generated/assigned by uZone Master.
            </summary>
    </member>
    <member name="F:uZone.Node.publicAddress">
      <summary>
            The hostname/address on which the node and its instances is publicly reachable.
            </summary>
    </member>
    <member name="M:uZone.Node.StartInstance(uZone.InstanceOptions,uZone.OnResponseCallback{uZone.StartInstanceRequest},uZone.OnResponseCallback{uZone.StartInstanceRequest})">
      <summary>
            Creates a new asynchronous request which shoud start a new instance directly on this node.
            </summary>
      <param name="options">Contains options and parameters for the new instance.</param>
      <param name="onSuccess">An optional callback</param>
      <param name="onError">Callback that is executed on error.</param>
      <returns>Information regarding the request and its state</returns>
    </member>
    <member name="M:uZone.Node.StartInstance(uZone.InstanceOptions)">
      <summary>
            Creates a new asynchronous request which shoud start a new instance directly on this node.
            </summary>
      <param name="options">Contains options and parameters for the new instance.</param>
      <returns>Information regarding the request and its state</returns>
    </member>
    <member name="M:uZone.Node.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.Node" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.Node" />.</returns>
    </member>
    <member name="E:uZone.Node.onInstanceStarted">
      <summary> Used to notify application about a new instance started </summary>
    </member>
    <member name="E:uZone.Node.onInstanceStopped">
      <summary> Used to notify application about an existing instance stopeed </summary>
    </member>
    <member name="E:uZone.Node.onStateChanged">
      <summary> Used to notify application when the state of the node changed </summary>
    </member>
    <member name="P:uZone.Node.customAttributes">
      <summary> A dictionary like collection of custom attributes. They consists of key-value string pairs. </summary>
    </member>
    <member name="P:uZone.Node.instanceTypes">
      <summary> A plain list of all instance types supported by given node. </summary>
    </member>
    <member name="P:uZone.Node.state">
      <summary> Current state of the given node. </summary>
    </member>
    <member name="P:uZone.Node.instances">
      <summary> Returns all currently known (and ready to use) instances related to the given node </summary>
    </member>
    <member name="T:uZone.Node.OnInstanceStartedHandler">
      <summary> Used to notify application about a new instance started </summary>
    </member>
    <member name="T:uZone.Node.OnInstanceStoppedHandler">
      <summary> Used to notify application about an existing instance stopeed </summary>
    </member>
    <member name="T:uZone.Node.OnStateChangedHandler">
      <summary> Used to notify application when the state of the node changed </summary>
    </member>
    <member name="T:uZone.InstanceProcess">
      <summary>
            This class represents a specific uZone instance process on the client (InstanceManager) side.
            </summary>
    </member>
    <member name="F:uZone.InstanceProcess.node">
      <summary> Points to a node the instance is running on. This member is allways valid (non-null) </summary>
    </member>
    <member name="F:uZone.InstanceProcess.id">
      <summary>
            Unique identifier of the instance process.
            </summary>
      <remarks>
            This is an internal uZone identifier, not the well known <see cref="F:uZone.InstanceProcess.pid" />!
            </remarks>
    </member>
    <member name="F:uZone.InstanceProcess.type">
      <summary> Instance type. </summary>
    </member>
    <member name="F:uZone.InstanceProcess.pid">
      <summary>
            Classic process identifier
            </summary>
    </member>
    <member name="F:uZone.InstanceProcess.port">
      <summary>
            The port used by the instance to accept incoming player connections.
            </summary>
    </member>
    <member name="F:uZone.InstanceProcess.commandLine">
      <summary>
            Command-line arguments as they were provided by the client when it was requesting to start the instance.
            </summary>
      <remarks>
            This variable contains only a part of the command-line arguments. Another part is taken from the given
            instance type definition of the related node configuration file. See <see cref="T:StartInstanceRequest" />
            and <see cref="T:InstanceOptions" /> for more info.
            
            This member contains only a subset of the <see cref="F:uZone.InstanceProcess.fullCommandLine" /> member variable.
            </remarks>
    </member>
    <member name="F:uZone.InstanceProcess.fullCommandLine">
      <summary>
            This member contains the exact content of the command-line as it was passed to the instance process (at the creation time).
            </summary>
    </member>
    <member name="M:uZone.InstanceProcess.Stop(uZone.OnResponseCallback{uZone.StopInstanceRequest},uZone.OnResponseCallback{uZone.StopInstanceRequest})">
      <summary>
            Requests to stop a running instance. It creates and activates the StopInstanceRequest.
            </summary>
      <returns>
            Returns reference to a StopInstanceRequest. It might return null when either the instance itself or
            owning node is not ready to process such request (disconnected, connection is lost, instance is already stopped)
            </returns>
    </member>
    <member name="M:uZone.InstanceProcess.Stop">
      <summary>
            Requests to stop a running instance. It creates and activates the StopInstanceRequest.
            </summary>
      <returns>
            Returns reference to a StopInstanceRequest. It might return null when either the instance itself or
            owning node is not ready to process such request (disconnected, connection is lost, instance is already stopped)
            </returns>
    </member>
    <member name="M:uZone.InstanceProcess.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceProcess" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceProcess" />.</returns>
    </member>
    <member name="E:uZone.InstanceProcess.onStateChanged">
      <summary> Used to notify application when the state of the instance changed </summary>
    </member>
    <member name="P:uZone.InstanceProcess.state">
      <summary> Gets or sets the state. </summary>
    </member>
    <member name="T:uZone.InstanceProcess.OnStateChangedHandler">
      <summary> Used to notify application when the state of the instance changed </summary>
    </member>
    <member name="T:uZone.ReadOnlyList`1">
      <summary>
            This is a very simple implementation of a read only version of the standard List collection.
            It is implemented as a wrapper around the original <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
    </member>
    <member name="M:uZone.ReadOnlyList`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>
            Constructs the new ReadOnlyList object
            </summary>
      <param name="list">The original list this object works with (wraps around)</param>
    </member>
    <member name="M:uZone.ReadOnlyList`1.Contains(`0)">
      <summary>
            The exactly same meaning as in the original List&lt;T&gt; class
            </summary>
    </member>
    <member name="P:uZone.ReadOnlyList`1.Item(System.Int32)">
      <summary>
            The exactly same meaning as in the original List&lt;T&gt; class
            </summary>
    </member>
    <member name="P:uZone.ReadOnlyList`1.Count">
      <summary>
            The exactly same meaning as in the original List&lt;T&gt; class
            </summary>
    </member>
    <member name="T:uZone.ReadOnlyDictionary`2">
      <summary>
            This is a very simple implementation of a read only version of the standard Dictionary collection.
            It is implemented as a wrapper around the original <see cref="T:System.Collections.Generic.Dictionary`2" /> class.
            </summary>
    </member>
    <member name="M:uZone.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>
            Constructs the new ReadOnlyDictionary object
            </summary>
      <param name="dictionary">The original dictionary this object works with (wraps around)</param>
    </member>
    <member name="M:uZone.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>
            The exactly same meaning as in the original Dictionary&lt;TKey, TValue&gt; class
            </summary>
    </member>
    <member name="M:uZone.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            The exactly same meaning as in the original Dictionary&lt;TKey, TValue&gt; class
            </summary>
    </member>
    <member name="P:uZone.ReadOnlyDictionary`2.Item(`0)">
      <summary>
            The exactly same meaning as in the original Dictionary&lt;TKey, TValue&gt; class
            </summary>
    </member>
    <member name="P:uZone.ReadOnlyDictionary`2.Count">
      <summary>
            The exactly same meaning as in the original Dictionary&lt;TKey, TValue&gt; class
            </summary>
    </member>
    <member name="T:uZone.ConnectRequest">
      <summary>
            This class represents an asynchronous connection request.
            </summary>
    </member>
    <member name="F:uZone.ConnectRequest.host">
      <summary> The host information passed from the application code </summary>
    </member>
    <member name="F:uZone.ConnectRequest.port">
      <summary> The port information passed from the application code </summary>
    </member>
    <member name="M:uZone.ConnectRequest.GetAssignedID">
      <summary>
            Returns the assigned peer id when the request succeeded.
            </summary>
      <returns>Peer id assigned by the underlying network layer.</returns>
      <remarks>
            If the request failed or is still active, this will throw a InstanceManagerException. If you are unsure
            if the request has succeeded or not, you can avoid the exception by checking <see cref="P:uZone.Request.isSuccessful" /> or by using <see cref="M:uZone.ConnectRequest.TryGetAssignedID(uZone.ClientID@)" />.
            </remarks>
    </member>
    <member name="M:uZone.ConnectRequest.TryGetAssignedID(uZone.ClientID@)">
      <summary>
            Safe version of <see cref="M:uZone.ConnectRequest.GetAssignedID" /></summary>
      <returns>Returns true when the request was sucessfull and the requested value is available and valid, otherwise returns false.</returns>
      <param name="outID">Contains assigned ID when the function returns true.</param>
    </member>
    <member name="M:uZone.ConnectRequest.GetConnectionError">
      <summary>
            Returns the specific connection error when the request failed.
            </summary>
      <remarks>
            This method throws the InstanceManagerException exception when the request has not failed. If you are unsure
            if the request has failed or not, you can avoid the exception by checking <see cref="P:uZone.Request.hasFailed" /> or by using <see cref="M:uZone.ConnectRequest.TryGetConnectionError(uZone.ConnectionError@)" />.
            </remarks>
    </member>
    <member name="M:uZone.ConnectRequest.TryGetConnectionError(uZone.ConnectionError@)">
      <summary>
            Safe version of <see cref="M:uZone.ConnectRequest.GetConnectionError" /></summary>
      <returns>Returns true when the requested value is available and valid, otherwise returns false.</returns>
    </member>
    <member name="M:uZone.ConnectRequest.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.ConnectRequest" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.ConnectRequest" />.</returns>
    </member>
    <member name="M:uZone.ConnectRequest.InvokeErrorCallback">
      <summary>
            Invokes the error callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="M:uZone.ConnectRequest.InvokeResponseCallback">
      <summary>
            Invokes the response callback. Kind of interface method. Each derived class must to implement it.
            </summary>
    </member>
    <member name="T:uZone.InstanceID">
      <summary>
            This class represents an <see cref="T:uZone.InstanceProcess" /> identifier
            </summary>
      <remarks>
            This class was designed for a logging/debuging purposes only. Objects of this class are never
            used as an input argument by uZone client API. That's why there is no public ctor available.
            <para />
            Alternatively, it can be used to store and compare identifiers on the client side. 
            </remarks>
    </member>
    <member name="F:uZone.InstanceID.unassigned">
      <summary>
            A special pre-defined value. Usually used for uninitialized/non-connected network connections.
            </summary>
    </member>
    <member name="M:uZone.InstanceID.op_Equality(uZone.InstanceID,uZone.InstanceID)">
      <summary> equality comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.op_Inequality(uZone.InstanceID,uZone.InstanceID)">
      <summary> non-equality comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.op_GreaterThanOrEqual(uZone.InstanceID,uZone.InstanceID)">
      <summary> is greater or equal comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.op_LessThanOrEqual(uZone.InstanceID,uZone.InstanceID)">
      <summary> is lower or equal comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.op_GreaterThan(uZone.InstanceID,uZone.InstanceID)">
      <summary> is greater comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.op_LessThan(uZone.InstanceID,uZone.InstanceID)">
      <summary> is lower comparison operator </summary>
    </member>
    <member name="M:uZone.InstanceID.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:uZone.InstanceID" /> object.
            </summary>
      <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
    </member>
    <member name="M:uZone.InstanceID.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.InstanceID" />.
            </summary>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:uZone.InstanceID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.InstanceID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.InstanceID.Equals(uZone.InstanceID)">
      <summary>
            Determines whether the specified <see cref="T:uZone.InstanceID" /> is equal to the current <see cref="T:uZone.InstanceID" />.
            </summary>
      <param name="other">The <see cref="T:uZone.InstanceID" /> to compare with the current <see cref="T:uZone.InstanceID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:uZone.InstanceID" /> is equal to the current <see cref="T:uZone.InstanceID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.InstanceID.CompareTo(uZone.InstanceID)">
      <summary>
            Compares to.
            </summary>
      <returns>The to.</returns>
      <param name="other">Other.</param>
    </member>
    <member name="M:uZone.InstanceID.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceID" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.InstanceID" />.</returns>
    </member>
    <member name="T:uZone.NodeID">
      <summary>
            This class represents a <see cref="T:uZone.Node" /> identifier.
            </summary>
      <remarks>
            This class was designed for a logging/debuging purposes only. Objects of this class are never
            used as an input argument by uZone client API. That's why there is no public ctor available.
            <para />
            Alternatively, it can be used to store and compare identifiers on the client side. 
            </remarks>
    </member>
    <member name="F:uZone.NodeID.unassigned">
      <summary>
            A special pre-defined value. Usually used for uninitialized/non-connected network connections.
            </summary>
    </member>
    <member name="M:uZone.NodeID.op_Equality(uZone.NodeID,uZone.NodeID)">
      <summary> equality comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.op_Inequality(uZone.NodeID,uZone.NodeID)">
      <summary> non-equality comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.op_GreaterThanOrEqual(uZone.NodeID,uZone.NodeID)">
      <summary> is greater or equal comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.op_LessThanOrEqual(uZone.NodeID,uZone.NodeID)">
      <summary> is lower or equal comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.op_GreaterThan(uZone.NodeID,uZone.NodeID)">
      <summary> is greater comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.op_LessThan(uZone.NodeID,uZone.NodeID)">
      <summary> is lower comparison operator </summary>
    </member>
    <member name="M:uZone.NodeID.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:uZone.NodeID" /> object.
            </summary>
      <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
    </member>
    <member name="M:uZone.NodeID.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.NodeID" />.
            </summary>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:uZone.NodeID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.NodeID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.NodeID.Equals(uZone.NodeID)">
      <summary>
            Determines whether the specified <see cref="T:uZone.NodeID" /> is equal to the current <see cref="T:uZone.NodeID" />.
            </summary>
      <param name="other">The <see cref="T:uZone.NodeID" /> to compare with the current <see cref="T:uZone.NodeID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:uZone.NodeID" /> is equal to the current <see cref="T:uZone.NodeID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.NodeID.CompareTo(uZone.NodeID)">
      <summary>
            Compares to.
            </summary>
      <returns>The to.</returns>
      <param name="other">Other.</param>
    </member>
    <member name="M:uZone.NodeID.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.NodeID" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.NodeID" />.</returns>
    </member>
    <member name="T:uZone.ClientID">
      <summary>
            This class represents a client (<see cref="T:uZone.InstanceManager" />) identifier
            </summary>
      <remarks>
            This class was designed for a logging/debuging purposes only. Objects of this class are never
            used as an input argument by uZone client API. That's why there is no public ctor available.
            <para />
            Alternatively, it can be used to store and compare identifiers on the client side. 
            </remarks>
    </member>
    <member name="F:uZone.ClientID.unassigned">
      <summary>
            A special pre-defined value. Usually used for uninitialized/non-connected network connections.
            </summary>
    </member>
    <member name="M:uZone.ClientID.op_Equality(uZone.ClientID,uZone.ClientID)">
      <summary> equality comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.op_Inequality(uZone.ClientID,uZone.ClientID)">
      <summary> non-equality comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.op_GreaterThanOrEqual(uZone.ClientID,uZone.ClientID)">
      <summary> is greater or equal comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.op_LessThanOrEqual(uZone.ClientID,uZone.ClientID)">
      <summary> is lower or equal comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.op_GreaterThan(uZone.ClientID,uZone.ClientID)">
      <summary> is greater comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.op_LessThan(uZone.ClientID,uZone.ClientID)">
      <summary> is lower comparison operator </summary>
    </member>
    <member name="M:uZone.ClientID.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:uZone.ClientID" /> object.
            </summary>
      <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
    </member>
    <member name="M:uZone.ClientID.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.ClientID" />.
            </summary>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:uZone.ClientID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:uZone.ClientID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.ClientID.Equals(uZone.ClientID)">
      <summary>
            Determines whether the specified <see cref="T:uZone.ClientID" /> is equal to the current <see cref="T:uZone.ClientID" />.
            </summary>
      <param name="other">The <see cref="T:uZone.ClientID" /> to compare with the current <see cref="T:uZone.ClientID" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:uZone.ClientID" /> is equal to the current <see cref="T:uZone.ClientID" />;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:uZone.ClientID.CompareTo(uZone.ClientID)">
      <summary>
            Compares to.
            </summary>
      <returns>The to.</returns>
      <param name="other">Other.</param>
    </member>
    <member name="M:uZone.ClientID.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:uZone.ClientID" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:uZone.ClientID" />.</returns>
    </member>
  </members>
</doc>